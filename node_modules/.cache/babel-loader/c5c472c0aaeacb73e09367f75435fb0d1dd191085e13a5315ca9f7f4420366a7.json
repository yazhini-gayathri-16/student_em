{"ast":null,"code":"import { collection, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '../utils/firebase';\nexport const eventService = {\n  // Get all events\n  getAllEvents: async () => {\n    try {\n      const eventsCollection = collection(db, 'events');\n      const eventsSnapshot = await getDocs(eventsCollection);\n      const eventsList = eventsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      return eventsList;\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      throw error;\n    }\n  },\n  // Get single event by ID\n  getEventById: async eventId => {\n    try {\n      const eventDoc = doc(db, 'events', eventId);\n      const eventSnapshot = await getDoc(eventDoc);\n      if (eventSnapshot.exists()) {\n        return {\n          id: eventSnapshot.id,\n          ...eventSnapshot.data()\n        };\n      } else {\n        throw new Error('Event not found');\n      }\n    } catch (error) {\n      console.error('Error fetching event:', error);\n      throw error;\n    }\n  },\n  // Register for an event\n  registerForEvent: async (eventId, studentData) => {\n    try {\n      const registrationsCollection = collection(db, 'registrations');\n      const registrationData = {\n        eventId,\n        studentId: studentData.id,\n        studentName: studentData.name,\n        studentEmail: studentData.email,\n        registrationDate: new Date().toISOString(),\n        status: 'registered'\n      };\n      const docRef = await addDoc(registrationsCollection, registrationData);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error registering for event:', error);\n      throw error;\n    }\n  },\n  // Get registrations for a student\n  getStudentRegistrations: async studentId => {\n    try {\n      const registrationsCollection = collection(db, 'registrations');\n      const registrationsSnapshot = await getDocs(registrationsCollection);\n      const registrations = registrationsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      })).filter(registration => registration.studentId === studentId);\n      return registrations;\n    } catch (error) {\n      console.error('Error fetching student registrations:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["collection","getDocs","doc","getDoc","addDoc","updateDoc","deleteDoc","db","eventService","getAllEvents","eventsCollection","eventsSnapshot","eventsList","docs","map","id","data","error","console","getEventById","eventId","eventDoc","eventSnapshot","exists","Error","registerForEvent","studentData","registrationsCollection","registrationData","studentId","studentName","name","studentEmail","email","registrationDate","Date","toISOString","status","docRef","getStudentRegistrations","registrationsSnapshot","registrations","filter","registration"],"sources":["C:/Users/user/Desktop/eventman_student/src/services/eventService.js"],"sourcesContent":["import { collection, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc } from 'firebase/firestore';\nimport { db } from '../utils/firebase';\n\nexport const eventService = {\n  // Get all events\n  getAllEvents: async () => {\n    try {\n      const eventsCollection = collection(db, 'events');\n      const eventsSnapshot = await getDocs(eventsCollection);\n      const eventsList = eventsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      return eventsList;\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      throw error;\n    }\n  },\n\n  // Get single event by ID\n  getEventById: async (eventId) => {\n    try {\n      const eventDoc = doc(db, 'events', eventId);\n      const eventSnapshot = await getDoc(eventDoc);\n\n      if (eventSnapshot.exists()) {\n        return {\n          id: eventSnapshot.id,\n          ...eventSnapshot.data()\n        };\n      } else {\n        throw new Error('Event not found');\n      }\n    } catch (error) {\n      console.error('Error fetching event:', error);\n      throw error;\n    }\n  },\n\n  // Register for an event\n  registerForEvent: async (eventId, studentData) => {\n    try {\n      const registrationsCollection = collection(db, 'registrations');\n      const registrationData = {\n        eventId,\n        studentId: studentData.id,\n        studentName: studentData.name,\n        studentEmail: studentData.email,\n        registrationDate: new Date().toISOString(),\n        status: 'registered'\n      };\n\n      const docRef = await addDoc(registrationsCollection, registrationData);\n      return docRef.id;\n    } catch (error) {\n      console.error('Error registering for event:', error);\n      throw error;\n    }\n  },\n\n  // Get registrations for a student\n  getStudentRegistrations: async (studentId) => {\n    try {\n      const registrationsCollection = collection(db, 'registrations');\n      const registrationsSnapshot = await getDocs(registrationsCollection);\n      const registrations = registrationsSnapshot.docs\n        .map(doc => ({\n          id: doc.id,\n          ...doc.data()\n        }))\n        .filter(registration => registration.studentId === studentId);\n\n      return registrations;\n    } catch (error) {\n      console.error('Error fetching student registrations:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}