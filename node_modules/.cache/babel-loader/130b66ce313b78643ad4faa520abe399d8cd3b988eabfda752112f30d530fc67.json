{"ast":null,"code":"import { signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { auth, db } from '../utils/firebase';\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error('Error signing in:', error);\n      throw error;\n    }\n  },\n  // Register user\n  register: async (email, password, userData) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Save additional user data to Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        email: user.email,\n        name: userData.name,\n        studentId: userData.studentId,\n        department: userData.department,\n        year: userData.year,\n        createdAt: new Date().toISOString(),\n        role: 'student'\n      });\n      return user;\n    } catch (error) {\n      console.error('Error creating account:', error);\n      throw error;\n    }\n  },\n  // Logout user\n  logout: async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  },\n  // Get user profile\n  getUserProfile: async userId => {\n    try {\n      const userDoc = doc(db, 'users', userId);\n      const userSnapshot = await getDoc(userDoc);\n      if (userSnapshot.exists()) {\n        return {\n          id: userSnapshot.id,\n          ...userSnapshot.data()\n        };\n      } else {\n        throw new Error('User not found');\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["signInWithEmailAndPassword","signOut","createUserWithEmailAndPassword","doc","setDoc","getDoc","auth","db","authService","login","email","password","userCredential","user","error","console","register","userData","uid","name","studentId","department","year","createdAt","Date","toISOString","role","logout","getUserProfile","userId","userDoc","userSnapshot","exists","id","data","Error"],"sources":["C:/Users/user/Desktop/eventman_student/src/services/authService.js"],"sourcesContent":["import { signInWithEmailAndPassword, signOut, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { doc, setDoc, getDoc } from 'firebase/firestore';\nimport { auth, db } from '../utils/firebase';\n\nexport const authService = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      return userCredential.user;\n    } catch (error) {\n      console.error('Error signing in:', error);\n      throw error;\n    }\n  },\n\n  // Register user\n  register: async (email, password, userData) => {\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Save additional user data to Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        email: user.email,\n        name: userData.name,\n        studentId: userData.studentId,\n        department: userData.department,\n        year: userData.year,\n        createdAt: new Date().toISOString(),\n        role: 'student'\n      });\n\n      return user;\n    } catch (error) {\n      console.error('Error creating account:', error);\n      throw error;\n    }\n  },\n\n  // Logout user\n  logout: async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Error signing out:', error);\n      throw error;\n    }\n  },\n\n  // Get user profile\n  getUserProfile: async (userId) => {\n    try {\n      const userDoc = doc(db, 'users', userId);\n      const userSnapshot = await getDoc(userDoc);\n\n      if (userSnapshot.exists()) {\n        return {\n          id: userSnapshot.id,\n          ...userSnapshot.data()\n        };\n      } else {\n        throw new Error('User not found');\n      }\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,SAASA,0BAA0B,EAAEC,OAAO,EAAEC,8BAA8B,QAAQ,eAAe;AACnG,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACxD,SAASC,IAAI,EAAEC,EAAE,QAAQ,mBAAmB;AAE5C,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMZ,0BAA0B,CAACM,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;MAC9E,OAAOC,cAAc,CAACC,IAAI;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,QAAQ,EAAE,MAAAA,CAAON,KAAK,EAAEC,QAAQ,EAAEM,QAAQ,KAAK;IAC7C,IAAI;MACF,MAAML,cAAc,GAAG,MAAMV,8BAA8B,CAACI,IAAI,EAAEI,KAAK,EAAEC,QAAQ,CAAC;MAClF,MAAME,IAAI,GAAGD,cAAc,CAACC,IAAI;;MAEhC;MACA,MAAMT,MAAM,CAACD,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEM,IAAI,CAACK,GAAG,CAAC,EAAE;QACvCR,KAAK,EAAEG,IAAI,CAACH,KAAK;QACjBS,IAAI,EAAEF,QAAQ,CAACE,IAAI;QACnBC,SAAS,EAAEH,QAAQ,CAACG,SAAS;QAC7BC,UAAU,EAAEJ,QAAQ,CAACI,UAAU;QAC/BC,IAAI,EAAEL,QAAQ,CAACK,IAAI;QACnBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,OAAOb,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAa,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAM1B,OAAO,CAACK,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAc,cAAc,EAAE,MAAOC,MAAM,IAAK;IAChC,IAAI;MACF,MAAMC,OAAO,GAAG3B,GAAG,CAACI,EAAE,EAAE,OAAO,EAAEsB,MAAM,CAAC;MACxC,MAAME,YAAY,GAAG,MAAM1B,MAAM,CAACyB,OAAO,CAAC;MAE1C,IAAIC,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;QACzB,OAAO;UACLC,EAAE,EAAEF,YAAY,CAACE,EAAE;UACnB,GAAGF,YAAY,CAACG,IAAI,CAAC;QACvB,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;MACnC;IACF,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}